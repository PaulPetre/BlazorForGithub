@page "/BlazorForGithub/auth/login"
@layout AuthLayout
@using BlazorForGithub.Shared.Models
@using BlazorForGithub.Shared.Services
@using System.Security.Claims

@inject ILocalStorageService storageService
@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email</label>
                <RadzenTextBox @bind-value="model.Email" />

                <label>Password</label>
                <RadzenPassword @bind-value="model.Password" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />

                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new();

    bool isBusy = false;
    string message = string.Empty;
    AlertMessageType messageType = AlertMessageType.Success;

    Dictionary<string, string> userInfo = new();

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            message = "Welcome to THIS app!";
            messageType = AlertMessageType.Success;

            var userInfo = new LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[ClaimTypes.NameIdentifier],
            };
            await storageService.SetItemAsync<LocalUserInfo>("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
